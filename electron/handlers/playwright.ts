import { spawn } from "node:child_process";
import path from "node:path";
import { getJobcanUrl } from "../store/settings";

export const playwrightHandlers = {
  "playwright:open-jobcan": async () => {
    console.log("=== Ë©≥Á¥∞„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâÈñãÂßã ===");
    const jobcanUrl = getJobcanUrl();
    const startTime = Date.now();

    return new Promise((resolve, reject) => {
      const scriptPath = path.join(
        process.cwd(),
        "scripts",
        "playwright-runner.cjs",
      );

      // Áí∞Â¢ÉÂ§âÊï∞„ÅßÁµÇ‰∫ÜÊñπÊ≥ï„ÇíÂà∂Âæ°
      const child = spawn("node", [scriptPath, "jobcan"], {
        stdio: "inherit",
        env: {
          ...process.env,
          JOBCAN_URL: jobcanUrl,
          EXIT_METHOD: "graceful", // immediate, graceful, natural „ÇíÂàá„ÇäÊõø„ÅàÂèØËÉΩ
        },
      });

      console.log(`üöÄ Â≠ê„Éó„É≠„Çª„ÇπËµ∑Âãï: PID ${child.pid}`);

      // „Åô„Åπ„Å¶„ÅÆ„Ç§„Éô„É≥„Éà„Å´Ë©≥Á¥∞„É≠„Ç∞„ÇíËøΩÂä†
      child.on("spawn", () => {
        const elapsed = Date.now() - startTime;
        console.log(`‚úÖ SPAWN: ${elapsed}ms - „Éó„É≠„Çª„Çπ ${child.pid} Ëµ∑ÂãïÊàêÂäü`);
      });

      child.on("exit", (code, signal) => {
        const elapsed = Date.now() - startTime;
        console.log(`üî¥ EXIT: ${elapsed}ms - „Éó„É≠„Çª„Çπ ${child.pid} ÁµÇ‰∫Ü`);
        console.log(`  - exitCode: ${code}`);
        console.log(`  - signal: ${signal}`);
        console.log(`  - killed: ${child.killed}`);
        console.log(`  - connected: ${child.connected}`);

        if (code === 0) {
          console.log("‚úÖ EXIT „Ç§„Éô„É≥„Éà„ÅßÊ≠£Â∏∏ÁµÇ‰∫Ü„ÇíÊ§úÁü•");
          resolve(undefined);
        } else {
          console.log(`‚ùå EXIT „Ç§„Éô„É≥„Éà„ÅßÁï∞Â∏∏ÁµÇ‰∫Ü„ÇíÊ§úÁü•: code=${code}`);
          reject(new Error(`Process exited with code ${code}`));
        }
      });

      child.on("close", (code, signal) => {
        const elapsed = Date.now() - startTime;
        console.log(
          `üîµ CLOSE: ${elapsed}ms - „Éó„É≠„Çª„Çπ ${child.pid} „Çπ„Éà„É™„Éº„É†ÈñâÈéñ`,
        );
        console.log(`  - exitCode: ${code}`);
        console.log(`  - signal: ${signal}`);
        console.log(`  - „Åô„Åπ„Å¶„ÅÆstdio„Çπ„Éà„É™„Éº„É†„ÅåÈñâ„Åò„Çâ„Çå„Åæ„Åó„Åü`);

        // exit „Ç§„Éô„É≥„Éà„ÅåÁô∫ÁÅ´„Åó„Å™„Åã„Å£„ÅüÂ†¥Âêà„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
        if (!child.exitCode && code === 0) {
          console.log("‚ö†Ô∏è  EXIT „Ç§„Éô„É≥„Éà„ÅåÁô∫ÁÅ´„Åó„Å™„Åã„Å£„Åü„Åü„ÇÅ„ÄÅCLOSE „ÅßÂá¶ÁêÜ");
          resolve(undefined);
        }
      });

      child.on("error", (error) => {
        const elapsed = Date.now() - startTime;
        console.log(`‚ùå ERROR: ${elapsed}ms - „Éó„É≠„Çª„ÇπËµ∑Âãï„Ç®„É©„Éº`);
        console.log(`  - error: ${error.message}`);
        reject(error);
      });

      child.on("disconnect", () => {
        const elapsed = Date.now() - startTime;
        console.log(`üîå DISCONNECT: ${elapsed}ms - IPCÂàáÊñ≠`);
      });

      // „Éó„É≠„Çª„Çπ„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíÂÆöÊúüÁöÑ„Å´„É≠„Ç∞Âá∫Âäõ
      const monitorInterval = setInterval(() => {
        if (child.exitCode === null) {
          console.log(`üìä „Éó„É≠„Çª„ÇπÁõ£Ë¶ñ: PID ${child.pid} ÂÆüË°å‰∏≠...`);
        } else {
          clearInterval(monitorInterval);
        }
      }, 5000);

      // „Çø„Ç§„É†„Ç¢„Ç¶„ÉàË®≠ÂÆöÔºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
      setTimeout(() => {
        if (child.exitCode === null) {
          console.log("‚è∞ „Çø„Ç§„É†„Ç¢„Ç¶„Éà: 60ÁßíÁµåÈÅé„ÄÅÂº∑Âà∂ÁµÇ‰∫Ü„Åó„Åæ„Åô");
          child.kill("SIGTERM");
          clearInterval(monitorInterval);
          setTimeout(() => {
            if (child.exitCode === null) {
              console.log("üî• SIGKILL „ÅßÂº∑Âà∂ÁµÇ‰∫Ü");
              child.kill("SIGKILL");
            }
          }, 5000);
        }
      }, 60000);
    });
  },
};
